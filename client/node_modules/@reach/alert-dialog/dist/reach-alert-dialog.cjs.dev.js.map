{"version":3,"sources":["../src/reach-alert-dialog.tsx"],"sourcesContent":["/**\n * Welcome to @reach/alert-dialog!\n *\n * A modal dialog that interrupts the user's workflow to get a response, usually\n * some sort of confirmation. This is different than a typical Dialog in that it\n * requires some user response, like \"Save\", or \"Cancel\", etc.\n *\n * Most of the time you'll use `AlertDialog`, `AlertDialogLabel`, and\n * `AlertDialogDescription` together. If you need more control over the styling\n * of the modal you can drop down a level and use `AlertDialogOverlay` and\n * `AlertDialogContent` instead of `AlertDialog`.\n *\n * When a Dialog opens, the _least destructive_ action should be focused so that\n * if a user accidentally hits enter when the dialog opens no damage is done.\n * This is accomplished with the `leastDestructiveRef` prop.\n *\n * Every dialog must render an `AlertDialogLabel` so the screen reader knows\n * what to say about the dialog. If an `AlertDialogDescription` is also\n * rendered, the screen reader will also announce that. If you render more than\n * these two elements and some buttons, the screen reader might not announce it\n * so it's important to keep the content inside of `AlertDialogLabel` and\n * `AlertDialogDescription`.\n *\n * This is built on top of [Dialog](/dialog), so `AlertDialog` spreads its props\n * and renders a `Dialog`, same for `AlertDialogOverlay` to `DialogOverlay`, and\n * `AlertDialogContent` to `DialogContent`.\n *\n * @see Docs     https://reach.tech/alert-dialog\n * @see Source https://github.com/reach/reach-ui/tree/main/packages/alert-dialog\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alertdialog\n */\n\nimport * as React from \"react\";\nimport { DialogOverlay, DialogContent } from \"@reach/dialog\";\nimport { useId } from \"@reach/auto-id\";\nimport {\n\tcreateContext,\n\tgetOwnerDocument,\n\tmakeId,\n\tuseComposedRefs,\n} from \"@reach/utils\";\nimport type * as Polymorphic from \"@reach/polymorphic\";\nimport invariant from \"tiny-invariant\";\n\nimport type { DialogProps, DialogContentProps } from \"@reach/dialog\";\n\nlet [AlertDialogProvider, useAlertDialogCtx] =\n\tcreateContext<AlertDialogContextValue>(\"AlertDialog\");\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogOverlay\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog overlay. In the following example we use the AlertDialogOverlay\n * and AlertDialogContent to have more control over the styles.\n *\n * Note: You must render an `AlertDialogContent` inside.\n *\n * @see Docs https://reach.tech/alert-dialog#alertdialogoverlay\n */\nconst AlertDialogOverlay = React.forwardRef(function AlertDialogOverlay(\n\t{ leastDestructiveRef, ...props },\n\tforwardedRef\n) {\n\tlet ownRef = React.useRef<HTMLDivElement | null>(null);\n\tlet ref = useComposedRefs(forwardedRef, ownRef);\n\tlet id = useId(props.id);\n\tlet labelId = id ? makeId(\"alert-dialog\", id) : undefined;\n\tlet descriptionId = id ? makeId(\"alert-dialog-description\", id) : undefined;\n\n\treturn (\n\t\t<AlertDialogProvider\n\t\t\tlabelId={labelId}\n\t\t\tdescriptionId={descriptionId}\n\t\t\toverlayRef={ownRef}\n\t\t\tleastDestructiveRef={leastDestructiveRef}\n\t\t>\n\t\t\t<DialogOverlay\n\t\t\t\t{...props}\n\t\t\t\tref={ref}\n\t\t\t\tdata-reach-alert-dialog-overlay\n\t\t\t\tinitialFocusRef={leastDestructiveRef}\n\t\t\t/>\n\t\t</AlertDialogProvider>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AlertDialogProps>;\n\nAlertDialogOverlay.displayName = \"AlertDialogOverlay\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogContent\n *\n * Low-level component if you need more control over the styles or rendering of\n * the dialog content.\n *\n * Note: Must be a child of `AlertDialogOverlay`.\n *\n * Note: You only need to use this when you are also styling\n * `AlertDialogOverlay`, otherwise you can use the high-level `AlertDialog`\n * component and pass the props to it.\n *\n * @see Docs https://reach.tech/alert-dialog#alertdialogcontent\n */\nconst AlertDialogContent = React.forwardRef(function AlertDialogContent(\n\t{ children, ...props },\n\tforwardedRef\n) {\n\tlet { descriptionId, labelId, leastDestructiveRef, overlayRef } =\n\t\tuseAlertDialogCtx(\"AlertDialogContent\");\n\tReact.useEffect(() => {\n\t\tlet ownerDocument = getOwnerDocument(overlayRef.current)!;\n\t\tif (labelId) {\n\t\t\tinvariant(\n\t\t\t\townerDocument.getElementById(labelId),\n\t\t\t\t`@reach/alert-dialog: You must render a \\`<AlertDialogLabel>\\`\n          inside an \\`<AlertDialog/>\\`.`\n\t\t\t);\n\t\t}\n\t\tinvariant(\n\t\t\tleastDestructiveRef,\n\t\t\t`@reach/alert-dialog: You must provide a \\`leastDestructiveRef\\` to\n          \\`<AlertDialog>\\` or \\`<AlertDialogOverlay/>\\`. Please see\n          https://ui.reach.tech/alert-dialog/#alertdialogoverlay-leastdestructiveref`\n\t\t);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [labelId, leastDestructiveRef]);\n\treturn (\n\t\t<DialogContent\n\t\t\t// The element that contains all elements of the dialog, including the\n\t\t\t// alert message and any dialog buttons, has role alertdialog.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#alertdialog\n\t\t\trole=\"alertdialog\"\n\t\t\t// The element with role `alertdialog` has a value set for\n\t\t\t// `aria-describedby` that refers to the element containing the alert\n\t\t\t// message.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#alertdialog\n\t\t\taria-describedby={descriptionId}\n\t\t\t// The element with role `alertdialog` has either:\n\t\t\t//   - A value for `aria-labelledby` that refers to the element containing\n\t\t\t//     the title of the dialog if the dialog has a visible label.\n\t\t\t//   - A value for `aria-label` if the dialog does not have a visible\n\t\t\t//     label.\n\t\t\t// https://www.w3.org/TR/wai-aria-practices-1.2/#alertdialog\n\t\t\taria-labelledby={props[\"aria-label\"] ? undefined : labelId}\n\t\t\t{...props}\n\t\t\tref={forwardedRef}\n\t\t\t// lol: remove in 1.0\n\t\t\tdata-reach-alert-dialong-content\n\t\t\tdata-reach-alert-dialog-content\n\t\t>\n\t\t\t{children}\n\t\t</DialogContent>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AlertDialogContentProps>;\n\n/**\n * @see Docs https://reach.tech/alert-dialog#alertdialogcontent-props\n */\ninterface AlertDialogContentProps extends DialogContentProps {\n\t/**\n\t * Accepts any renderable content but should generally be restricted to\n\t * `AlertDialogLabel`, `AlertDialogDescription` and action buttons, other\n\t * content might not be announced to the user by the screen reader.\n\t *\n\t * @see Docs https://reach.tech/alert-dialog#alertdialogcontent-children\n\t */\n\tchildren: React.ReactNode;\n}\n\nAlertDialogContent.displayName = \"AlertDialogContent\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogLabel\n *\n * The first thing ready by screen readers when the dialog opens, usually the\n * title of the dialog like \"Warning!\" or \"Please confirm!\".\n *\n * This is required. The `AlertDialog` will throw an error if no label is\n * rendered.\n *\n * @see Docs https://reach.tech/alert-dialog#alertdialoglabel\n */\nconst AlertDialogLabel = React.forwardRef(function (\n\t{ as: Comp = \"div\", ...props },\n\tforwardedRef\n) {\n\tconst { labelId } = useAlertDialogCtx(\"AlertDialogLabel\");\n\treturn (\n\t\t<Comp\n\t\t\t{...props}\n\t\t\tref={forwardedRef}\n\t\t\tid={labelId}\n\t\t\tdata-reach-alert-dialog-label\n\t\t/>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AlertDialogLabelProps>;\n\nAlertDialogLabel.displayName = \"AlertDialogLabel\";\n\ninterface AlertDialogLabelProps {}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialogDescription\n *\n * Additional content read by screen readers, usually a longer description\n * about what you need from the user like \"This action is permanent, are you\n * sure?\" etc.\n *\n * @see Docs https://reach.tech/alert-dialog#alertdialogdescription\n * @param props\n */\nconst AlertDialogDescription = React.forwardRef(function AlertDialogDescription(\n\t{ as: Comp = \"div\", ...props },\n\tforwardedRef\n) {\n\tconst { descriptionId } = useAlertDialogCtx(\"AlertDialogDescription\");\n\treturn (\n\t\t<Comp\n\t\t\t{...props}\n\t\t\tref={forwardedRef}\n\t\t\tid={descriptionId}\n\t\t\tdata-reach-alert-dialog-description\n\t\t/>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AlertDialogDescriptionProps>;\n\nAlertDialogDescription.displayName = \"AlertDialogDescription\";\n\ninterface AlertDialogDescriptionProps {}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * AlertDialog\n *\n * High-level component to render an alert dialog.\n *\n * @see Docs https://reach.tech/alert-dialog#alertdialog\n * @param props\n */\nconst AlertDialog = React.forwardRef(function AlertDialog(\n\t{ id, isOpen, onDismiss, leastDestructiveRef, ...props },\n\tforwardedRef\n) {\n\treturn (\n\t\t<AlertDialogOverlay {...{ isOpen, onDismiss, leastDestructiveRef, id }}>\n\t\t\t<AlertDialogContent ref={forwardedRef} {...props} />\n\t\t</AlertDialogOverlay>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", AlertDialogProps>;\n\n/**\n * @see Docs https://reach.tech/alert-dialog#alertdialog-props\n */\ninterface AlertDialogProps extends DialogProps {\n\tid?: string;\n\t/**\n\t * Controls whether the dialog is open or not.\n\t *\n\t * @see Docs: https://reach.tech/alert-dialog#alertdialog-isopen\n\t */\n\tisOpen?: boolean;\n\t/**\n\t * When the user clicks outside the modal or hits the escape key,\n\t * this function will be called. If you want the modal to close,\n\t * youâ€™ll need to set state.\n\t *\n\t * @see Docs: https://reach.tech/alert-dialog#alertdialog-ondismiss\n\t */\n\tonDismiss?(event: React.MouseEvent | React.KeyboardEvent): void;\n\t/**\n\t * To prevent accidental data loss, an alert dialog should focus the least\n\t * destructive action button when it opens.\n\t *\n\t * @see Docs: https://reach.tech/alert-dialog#alertdialog-leastdestructiveref\n\t */\n\tleastDestructiveRef?: React.RefObject<HTMLElement>;\n\t/**\n\t * Accepts any renderable content but should generally be restricted to\n\t * `AlertDialogLabel`, `AlertDialogDescription` and action buttons, other\n\t * content might not be announced to the user by the screen reader.\n\t *\n\t * @see Docs: https://reach.tech/alert-dialog#alertdialog-children\n\t */\n\tchildren: React.ReactNode;\n}\n\nAlertDialog.displayName = \"AlertDialog\";\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ninterface AlertDialogContextValue {\n\tlabelId: string | undefined;\n\tdescriptionId: string | undefined;\n\toverlayRef: React.MutableRefObject<HTMLDivElement | null>;\n\tleastDestructiveRef?: React.RefObject<HTMLElement>;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type {\n\tAlertDialogContentProps,\n\tAlertDialogDescriptionProps,\n\tAlertDialogLabelProps,\n\tAlertDialogProps,\n};\nexport {\n\tAlertDialog,\n\tAlertDialogContent,\n\tAlertDialogDescription,\n\tAlertDialogLabel,\n\tAlertDialogOverlay,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA,YAAuB;AACvB,oBAA6C;AAC7C,qBAAsB;AACtB,mBAKO;AAEP,4BAAsB;AAItB,IAAI,CAAC,qBAAqB,qBACzB,gCAAuC,aAAa;AAerD,IAAM,qBAAqB,AAAM,iBAAW,6BAC3C,IACA,cACC;AAFD,eAAE,0BAAF,IAA0B,kBAA1B,IAA0B,CAAxB;AAGF,MAAI,SAAS,AAAM,aAA8B,IAAI;AACrD,MAAI,MAAM,kCAAgB,cAAc,MAAM;AAC9C,MAAI,KAAK,0BAAM,MAAM,EAAE;AACvB,MAAI,UAAU,KAAK,yBAAO,gBAAgB,EAAE,IAAI;AAChD,MAAI,gBAAgB,KAAK,yBAAO,4BAA4B,EAAE,IAAI;AAElE,SACC,oCAAC;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,KAEA,oCAAC,8DACI,QADJ;AAAA,IAEA;AAAA,IACA,mCAA+B;AAAA,IAC/B,iBAAiB;AAAA,IAClB,CACD;AAEF,CAAC;AAED,mBAAmB,cAAc;AAkBjC,IAAM,qBAAqB,AAAM,iBAAW,6BAC3C,IACA,cACC;AAFD,eAAE,eAAF,IAAe,kBAAf,IAAe,CAAb;AAGF,MAAI,EAAE,eAAe,SAAS,qBAAqB,eAClD,kBAAkB,oBAAoB;AACvC,EAAM,gBAAU,MAAM;AACrB,QAAI,gBAAgB,mCAAiB,WAAW,OAAO;AACvD,QAAI,SAAS;AACZ,yCACC,cAAc,eAAe,OAAO,GACpC;AAAA,wCAED;AAAA,IACD;AACA,uCACC,qBACA;AAAA;AAAA,qFAGD;AAAA,EAED,GAAG,CAAC,SAAS,mBAAmB,CAAC;AACjC,SACC,oCAAC;AAAA,IAIA,MAAK;AAAA,IAKL,oBAAkB;AAAA,IAOlB,mBAAiB,MAAM,gBAAgB,SAAY;AAAA,KAC/C,QAjBJ;AAAA,IAkBA,KAAK;AAAA,IAEL,oCAAgC;AAAA,IAChC,mCAA+B;AAAA,MAE9B,QACF;AAEF,CAAC;AAgBD,mBAAmB,cAAc;AAejC,IAAM,mBAAmB,AAAM,iBAAW,SACzC,IACA,cACC;AAFD,eAAE,MAAI,OAAO,UAAb,IAAuB,kBAAvB,IAAuB,CAArB;AAGF,QAAM,EAAE,YAAY,kBAAkB,kBAAkB;AACxD,SACC,oCAAC,uCACI,QADJ;AAAA,IAEA,KAAK;AAAA,IACL,IAAI;AAAA,IACJ,iCAA6B;AAAA,IAC9B;AAEF,CAAC;AAED,iBAAiB,cAAc;AAgB/B,IAAM,yBAAyB,AAAM,iBAAW,iCAC/C,IACA,cACC;AAFD,eAAE,MAAI,OAAO,UAAb,IAAuB,kBAAvB,IAAuB,CAArB;AAGF,QAAM,EAAE,kBAAkB,kBAAkB,wBAAwB;AACpE,SACC,oCAAC,uCACI,QADJ;AAAA,IAEA,KAAK;AAAA,IACL,IAAI;AAAA,IACJ,uCAAmC;AAAA,IACpC;AAEF,CAAC;AAED,uBAAuB,cAAc;AAcrC,IAAM,cAAc,AAAM,iBAAW,sBACpC,IACA,cACC;AAFD,eAAE,MAAI,QAAQ,WAAW,wBAAzB,IAAiD,kBAAjD,IAAiD,CAA/C,MAAI,UAAQ,aAAW;AAGzB,SACC,oCAAC,uCAAuB,EAAE,QAAQ,WAAW,qBAAqB,GAAG,IACpE,oCAAC;AAAA,IAAmB,KAAK;AAAA,KAAkB,MAAO,CACnD;AAEF,CAAC;AAsCD,YAAY,cAAc;","names":[]}