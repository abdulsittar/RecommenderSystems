"use strict";
/**
  * @reach/alert-dialog v0.18.0
  *
  * Copyright (c) 2018-2022, React Training LLC
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE.md file in the root directory of this source tree.
  *
  * @license MIT
  */

var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/reach-alert-dialog.tsx
var reach_alert_dialog_exports = {};
__export(reach_alert_dialog_exports, {
  AlertDialog: () => AlertDialog,
  AlertDialogContent: () => AlertDialogContent,
  AlertDialogDescription: () => AlertDialogDescription,
  AlertDialogLabel: () => AlertDialogLabel,
  AlertDialogOverlay: () => AlertDialogOverlay
});
module.exports = __toCommonJS(reach_alert_dialog_exports);
var React = __toESM(require("react"));
var import_dialog = require("@reach/dialog");
var import_auto_id = require("@reach/auto-id");
var import_utils = require("@reach/utils");
var import_tiny_invariant = __toESM(require("tiny-invariant"));
var [AlertDialogProvider, useAlertDialogCtx] = (0, import_utils.createContext)("AlertDialog");
var AlertDialogOverlay = React.forwardRef(function AlertDialogOverlay2(_a, forwardedRef) {
  var _b = _a, { leastDestructiveRef } = _b, props = __objRest(_b, ["leastDestructiveRef"]);
  let ownRef = React.useRef(null);
  let ref = (0, import_utils.useComposedRefs)(forwardedRef, ownRef);
  let id = (0, import_auto_id.useId)(props.id);
  let labelId = id ? (0, import_utils.makeId)("alert-dialog", id) : void 0;
  let descriptionId = id ? (0, import_utils.makeId)("alert-dialog-description", id) : void 0;
  return /* @__PURE__ */ React.createElement(AlertDialogProvider, {
    labelId,
    descriptionId,
    overlayRef: ownRef,
    leastDestructiveRef
  }, /* @__PURE__ */ React.createElement(import_dialog.DialogOverlay, __spreadProps(__spreadValues({}, props), {
    ref,
    "data-reach-alert-dialog-overlay": true,
    initialFocusRef: leastDestructiveRef
  })));
});
AlertDialogOverlay.displayName = "AlertDialogOverlay";
var AlertDialogContent = React.forwardRef(function AlertDialogContent2(_a, forwardedRef) {
  var _b = _a, { children } = _b, props = __objRest(_b, ["children"]);
  let { descriptionId, labelId, leastDestructiveRef, overlayRef } = useAlertDialogCtx("AlertDialogContent");
  React.useEffect(() => {
    let ownerDocument = (0, import_utils.getOwnerDocument)(overlayRef.current);
    if (labelId) {
      (0, import_tiny_invariant.default)(ownerDocument.getElementById(labelId), `@reach/alert-dialog: You must render a \`<AlertDialogLabel>\`
          inside an \`<AlertDialog/>\`.`);
    }
    (0, import_tiny_invariant.default)(leastDestructiveRef, `@reach/alert-dialog: You must provide a \`leastDestructiveRef\` to
          \`<AlertDialog>\` or \`<AlertDialogOverlay/>\`. Please see
          https://ui.reach.tech/alert-dialog/#alertdialogoverlay-leastdestructiveref`);
  }, [labelId, leastDestructiveRef]);
  return /* @__PURE__ */ React.createElement(import_dialog.DialogContent, __spreadProps(__spreadValues({
    role: "alertdialog",
    "aria-describedby": descriptionId,
    "aria-labelledby": props["aria-label"] ? void 0 : labelId
  }, props), {
    ref: forwardedRef,
    "data-reach-alert-dialong-content": true,
    "data-reach-alert-dialog-content": true
  }), children);
});
AlertDialogContent.displayName = "AlertDialogContent";
var AlertDialogLabel = React.forwardRef(function(_a, forwardedRef) {
  var _b = _a, { as: Comp = "div" } = _b, props = __objRest(_b, ["as"]);
  const { labelId } = useAlertDialogCtx("AlertDialogLabel");
  return /* @__PURE__ */ React.createElement(Comp, __spreadProps(__spreadValues({}, props), {
    ref: forwardedRef,
    id: labelId,
    "data-reach-alert-dialog-label": true
  }));
});
AlertDialogLabel.displayName = "AlertDialogLabel";
var AlertDialogDescription = React.forwardRef(function AlertDialogDescription2(_a, forwardedRef) {
  var _b = _a, { as: Comp = "div" } = _b, props = __objRest(_b, ["as"]);
  const { descriptionId } = useAlertDialogCtx("AlertDialogDescription");
  return /* @__PURE__ */ React.createElement(Comp, __spreadProps(__spreadValues({}, props), {
    ref: forwardedRef,
    id: descriptionId,
    "data-reach-alert-dialog-description": true
  }));
});
AlertDialogDescription.displayName = "AlertDialogDescription";
var AlertDialog = React.forwardRef(function AlertDialog2(_a, forwardedRef) {
  var _b = _a, { id, isOpen, onDismiss, leastDestructiveRef } = _b, props = __objRest(_b, ["id", "isOpen", "onDismiss", "leastDestructiveRef"]);
  return /* @__PURE__ */ React.createElement(AlertDialogOverlay, __spreadValues({}, { isOpen, onDismiss, leastDestructiveRef, id }), /* @__PURE__ */ React.createElement(AlertDialogContent, __spreadValues({
    ref: forwardedRef
  }, props)));
});
AlertDialog.displayName = "AlertDialog";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogLabel,
  AlertDialogOverlay
});
//# sourceMappingURL=reach-alert-dialog.cjs.dev.js.map