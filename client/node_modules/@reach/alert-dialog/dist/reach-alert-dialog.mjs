"use strict";
/**
  * @reach/alert-dialog v0.18.0
  *
  * Copyright (c) 2018-2022, React Training LLC
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE.md file in the root directory of this source tree.
  *
  * @license MIT
  */


// src/reach-alert-dialog.tsx
import * as React from "react";
import { DialogOverlay, DialogContent } from "@reach/dialog";
import { useId } from "@reach/auto-id";
import {
  createContext,
  getOwnerDocument,
  makeId,
  useComposedRefs
} from "@reach/utils";
import invariant from "tiny-invariant";
var [AlertDialogProvider, useAlertDialogCtx] = createContext("AlertDialog");
var AlertDialogOverlay = React.forwardRef(function AlertDialogOverlay2({ leastDestructiveRef, ...props }, forwardedRef) {
  let ownRef = React.useRef(null);
  let ref = useComposedRefs(forwardedRef, ownRef);
  let id = useId(props.id);
  let labelId = id ? makeId("alert-dialog", id) : void 0;
  let descriptionId = id ? makeId("alert-dialog-description", id) : void 0;
  return /* @__PURE__ */ React.createElement(AlertDialogProvider, {
    labelId,
    descriptionId,
    overlayRef: ownRef,
    leastDestructiveRef
  }, /* @__PURE__ */ React.createElement(DialogOverlay, {
    ...props,
    ref,
    "data-reach-alert-dialog-overlay": true,
    initialFocusRef: leastDestructiveRef
  }));
});
AlertDialogOverlay.displayName = "AlertDialogOverlay";
var AlertDialogContent = React.forwardRef(function AlertDialogContent2({ children, ...props }, forwardedRef) {
  let { descriptionId, labelId, leastDestructiveRef, overlayRef } = useAlertDialogCtx("AlertDialogContent");
  React.useEffect(() => {
    let ownerDocument = getOwnerDocument(overlayRef.current);
    if (labelId) {
      invariant(ownerDocument.getElementById(labelId), `@reach/alert-dialog: You must render a \`<AlertDialogLabel>\`
          inside an \`<AlertDialog/>\`.`);
    }
    invariant(leastDestructiveRef, `@reach/alert-dialog: You must provide a \`leastDestructiveRef\` to
          \`<AlertDialog>\` or \`<AlertDialogOverlay/>\`. Please see
          https://ui.reach.tech/alert-dialog/#alertdialogoverlay-leastdestructiveref`);
  }, [labelId, leastDestructiveRef]);
  return /* @__PURE__ */ React.createElement(DialogContent, {
    role: "alertdialog",
    "aria-describedby": descriptionId,
    "aria-labelledby": props["aria-label"] ? void 0 : labelId,
    ...props,
    ref: forwardedRef,
    "data-reach-alert-dialong-content": true,
    "data-reach-alert-dialog-content": true
  }, children);
});
AlertDialogContent.displayName = "AlertDialogContent";
var AlertDialogLabel = React.forwardRef(function({ as: Comp = "div", ...props }, forwardedRef) {
  const { labelId } = useAlertDialogCtx("AlertDialogLabel");
  return /* @__PURE__ */ React.createElement(Comp, {
    ...props,
    ref: forwardedRef,
    id: labelId,
    "data-reach-alert-dialog-label": true
  });
});
AlertDialogLabel.displayName = "AlertDialogLabel";
var AlertDialogDescription = React.forwardRef(function AlertDialogDescription2({ as: Comp = "div", ...props }, forwardedRef) {
  const { descriptionId } = useAlertDialogCtx("AlertDialogDescription");
  return /* @__PURE__ */ React.createElement(Comp, {
    ...props,
    ref: forwardedRef,
    id: descriptionId,
    "data-reach-alert-dialog-description": true
  });
});
AlertDialogDescription.displayName = "AlertDialogDescription";
var AlertDialog = React.forwardRef(function AlertDialog2({ id, isOpen, onDismiss, leastDestructiveRef, ...props }, forwardedRef) {
  return /* @__PURE__ */ React.createElement(AlertDialogOverlay, {
    ...{ isOpen, onDismiss, leastDestructiveRef, id }
  }, /* @__PURE__ */ React.createElement(AlertDialogContent, {
    ref: forwardedRef,
    ...props
  }));
});
AlertDialog.displayName = "AlertDialog";
export {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogLabel,
  AlertDialogOverlay
};
