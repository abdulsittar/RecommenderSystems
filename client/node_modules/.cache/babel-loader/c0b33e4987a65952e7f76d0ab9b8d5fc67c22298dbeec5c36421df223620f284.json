{"ast":null,"code":"/*Copyright (c) 2020 Jason Zissman\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\n\n(() => {\n  ((root, factory) => {\n    if (typeof module !== 'undefined' && module.exports) {\n      // CommonJS\n      return module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n      // AMD\n      define([], () => {\n        return root.TimeMe = factory();\n      });\n    } else {\n      // Global Variables\n      return root.TimeMe = factory();\n    }\n  })(this, () => {\n    let TimeMe = {\n      startStopTimes: {},\n      idleTimeoutMs: 30 * 1000,\n      currentIdleTimeMs: 0,\n      checkIdleStateRateMs: 250,\n      isUserCurrentlyOnPage: true,\n      isUserCurrentlyIdle: false,\n      currentPageName: \"default-page-name\",\n      timeElapsedCallbacks: [],\n      userLeftCallbacks: [],\n      userReturnCallbacks: [],\n      trackTimeOnElement: elementId => {\n        let element = document.getElementById(elementId);\n        if (element) {\n          element.addEventListener(\"mouseover\", () => {\n            TimeMe.startTimer(elementId);\n          });\n          element.addEventListener(\"mousemove\", () => {\n            TimeMe.startTimer(elementId);\n          });\n          element.addEventListener(\"mouseleave\", () => {\n            TimeMe.stopTimer(elementId);\n          });\n          element.addEventListener(\"keypress\", () => {\n            TimeMe.startTimer(elementId);\n          });\n          element.addEventListener(\"focus\", () => {\n            TimeMe.startTimer(elementId);\n          });\n        }\n      },\n      getTimeOnElementInSeconds: elementId => {\n        let time = TimeMe.getTimeOnPageInSeconds(elementId);\n        if (time) {\n          return time;\n        } else {\n          return 0;\n        }\n      },\n      // startTime is optional. If provided, must be of type Date(). By providing\n      // startTime, you are overriding the internal timing mechanism and manually\n      // indicating the start time.\n      startTimer: (pageName, startTime) => {\n        if (!pageName) {\n          pageName = TimeMe.currentPageName;\n        }\n        if (TimeMe.startStopTimes[pageName] === undefined) {\n          TimeMe.startStopTimes[pageName] = [];\n        } else {\n          let arrayOfTimes = TimeMe.startStopTimes[pageName];\n          let latestStartStopEntry = arrayOfTimes[arrayOfTimes.length - 1];\n          if (latestStartStopEntry !== undefined && latestStartStopEntry.stopTime === undefined) {\n            // Can't start new timer until previous finishes.\n            return;\n          }\n        }\n        TimeMe.startStopTimes[pageName].push({\n          \"startTime\": startTime || new Date(),\n          \"stopTime\": undefined\n        });\n      },\n      stopAllTimers: () => {\n        let pageNames = Object.keys(TimeMe.startStopTimes);\n        for (let i = 0; i < pageNames.length; i++) {\n          TimeMe.stopTimer(pageNames[i]);\n        }\n      },\n      // stopTime is optional. If provided, must be of type Date(). By providing\n      // stopTime, you are overriding the internal timing mechanism and manually\n      // indicating the stop time.\n      stopTimer: (pageName, stopTime) => {\n        if (!pageName) {\n          pageName = TimeMe.currentPageName;\n        }\n        let arrayOfTimes = TimeMe.startStopTimes[pageName];\n        if (arrayOfTimes === undefined || arrayOfTimes.length === 0) {\n          // Can't stop timer before you've started it.\n          return;\n        }\n        if (arrayOfTimes[arrayOfTimes.length - 1].stopTime === undefined) {\n          arrayOfTimes[arrayOfTimes.length - 1].stopTime = stopTime || new Date();\n        }\n      },\n      getTimeOnCurrentPageInSeconds: () => {\n        return TimeMe.getTimeOnPageInSeconds(TimeMe.currentPageName);\n      },\n      getTimeOnPageInSeconds: pageName => {\n        let timeInMs = TimeMe.getTimeOnPageInMilliseconds(pageName);\n        if (timeInMs === undefined) {\n          return undefined;\n        } else {\n          return timeInMs / 1000;\n        }\n      },\n      getTimeOnCurrentPageInMilliseconds: () => {\n        return TimeMe.getTimeOnPageInMilliseconds(TimeMe.currentPageName);\n      },\n      getTimeOnPageInMilliseconds: pageName => {\n        let totalTimeOnPage = 0;\n        let arrayOfTimes = TimeMe.startStopTimes[pageName];\n        if (arrayOfTimes === undefined) {\n          // Can't get time on page before you've started the timer.\n          return;\n        }\n        let timeSpentOnPageInSeconds = 0;\n        for (let i = 0; i < arrayOfTimes.length; i++) {\n          let startTime = arrayOfTimes[i].startTime;\n          let stopTime = arrayOfTimes[i].stopTime;\n          if (stopTime === undefined) {\n            stopTime = new Date();\n          }\n          let difference = stopTime - startTime;\n          timeSpentOnPageInSeconds += difference;\n        }\n        totalTimeOnPage = Number(timeSpentOnPageInSeconds);\n        return totalTimeOnPage;\n      },\n      getTimeOnAllPagesInSeconds: () => {\n        let allTimes = [];\n        let pageNames = Object.keys(TimeMe.startStopTimes);\n        for (let i = 0; i < pageNames.length; i++) {\n          let pageName = pageNames[i];\n          let timeOnPage = TimeMe.getTimeOnPageInSeconds(pageName);\n          allTimes.push({\n            \"pageName\": pageName,\n            \"timeOnPage\": timeOnPage\n          });\n        }\n        return allTimes;\n      },\n      setIdleDurationInSeconds: duration => {\n        let durationFloat = parseFloat(duration);\n        if (isNaN(durationFloat) === false) {\n          TimeMe.idleTimeoutMs = duration * 1000;\n        } else {\n          throw {\n            name: \"InvalidDurationException\",\n            message: \"An invalid duration time (\" + duration + \") was provided.\"\n          };\n        }\n      },\n      setCurrentPageName: pageName => {\n        TimeMe.currentPageName = pageName;\n      },\n      resetRecordedPageTime: pageName => {\n        delete TimeMe.startStopTimes[pageName];\n      },\n      resetAllRecordedPageTimes: () => {\n        let pageNames = Object.keys(TimeMe.startStopTimes);\n        for (let i = 0; i < pageNames.length; i++) {\n          TimeMe.resetRecordedPageTime(pageNames[i]);\n        }\n      },\n      userActivityDetected: () => {\n        if (TimeMe.isUserCurrentlyIdle) {\n          TimeMe.triggerUserHasReturned();\n        }\n        TimeMe.resetIdleCountdown();\n      },\n      resetIdleCountdown: () => {\n        TimeMe.isUserCurrentlyIdle = false;\n        TimeMe.currentIdleTimeMs = 0;\n      },\n      callWhenUserLeaves: (callback, numberOfTimesToInvoke) => {\n        TimeMe.userLeftCallbacks.push({\n          callback: callback,\n          numberOfTimesToInvoke: numberOfTimesToInvoke\n        });\n      },\n      callWhenUserReturns: (callback, numberOfTimesToInvoke) => {\n        TimeMe.userReturnCallbacks.push({\n          callback: callback,\n          numberOfTimesToInvoke: numberOfTimesToInvoke\n        });\n      },\n      triggerUserHasReturned: () => {\n        if (!TimeMe.isUserCurrentlyOnPage) {\n          TimeMe.isUserCurrentlyOnPage = true;\n          TimeMe.resetIdleCountdown();\n          for (let i = 0; i < TimeMe.userReturnCallbacks.length; i++) {\n            let userReturnedCallback = TimeMe.userReturnCallbacks[i];\n            let numberTimes = userReturnedCallback.numberOfTimesToInvoke;\n            if (isNaN(numberTimes) || numberTimes === undefined || numberTimes > 0) {\n              userReturnedCallback.numberOfTimesToInvoke -= 1;\n              userReturnedCallback.callback();\n            }\n          }\n        }\n        TimeMe.startTimer();\n      },\n      // TODO - we are muddying the waters in between\n      // 'user left page' and 'user gone idle'. Really should be\n      // two separate concepts entirely. Need to break this into smaller  functions\n      // for either scenario.\n      triggerUserHasLeftPageOrGoneIdle: () => {\n        if (TimeMe.isUserCurrentlyOnPage) {\n          TimeMe.isUserCurrentlyOnPage = false;\n          for (let i = 0; i < TimeMe.userLeftCallbacks.length; i++) {\n            let userHasLeftCallback = TimeMe.userLeftCallbacks[i];\n            let numberTimes = userHasLeftCallback.numberOfTimesToInvoke;\n            if (isNaN(numberTimes) || numberTimes === undefined || numberTimes > 0) {\n              userHasLeftCallback.numberOfTimesToInvoke -= 1;\n              userHasLeftCallback.callback();\n            }\n          }\n        }\n        TimeMe.stopAllTimers();\n      },\n      callAfterTimeElapsedInSeconds: (timeInSeconds, callback) => {\n        TimeMe.timeElapsedCallbacks.push({\n          timeInSeconds: timeInSeconds,\n          callback: callback,\n          pending: true\n        });\n      },\n      checkIdleState: () => {\n        for (let i = 0; i < TimeMe.timeElapsedCallbacks.length; i++) {\n          if (TimeMe.timeElapsedCallbacks[i].pending && TimeMe.getTimeOnCurrentPageInSeconds() > TimeMe.timeElapsedCallbacks[i].timeInSeconds) {\n            TimeMe.timeElapsedCallbacks[i].callback();\n            TimeMe.timeElapsedCallbacks[i].pending = false;\n          }\n        }\n        if (TimeMe.isUserCurrentlyIdle === false && TimeMe.currentIdleTimeMs > TimeMe.idleTimeoutMs) {\n          TimeMe.isUserCurrentlyIdle = true;\n          TimeMe.triggerUserHasLeftPageOrGoneIdle();\n        } else {\n          TimeMe.currentIdleTimeMs += TimeMe.checkIdleStateRateMs;\n        }\n      },\n      visibilityChangeEventName: undefined,\n      hiddenPropName: undefined,\n      listenForVisibilityEvents: (trackWhenUserLeavesPage, trackWhenUserGoesIdle) => {\n        if (trackWhenUserLeavesPage) {\n          TimeMe.listenForUserLeavesOrReturnsEvents();\n        }\n        if (trackWhenUserGoesIdle) {\n          TimeMe.listForIdleEvents();\n        }\n      },\n      listenForUserLeavesOrReturnsEvents: () => {\n        if (typeof document.hidden !== \"undefined\") {\n          TimeMe.hiddenPropName = \"hidden\";\n          TimeMe.visibilityChangeEventName = \"visibilitychange\";\n        } else if (typeof document.mozHidden !== \"undefined\") {\n          TimeMe.hiddenPropName = \"mozHidden\";\n          TimeMe.visibilityChangeEventName = \"mozvisibilitychange\";\n        } else if (typeof document.msHidden !== \"undefined\") {\n          TimeMe.hiddenPropName = \"msHidden\";\n          TimeMe.visibilityChangeEventName = \"msvisibilitychange\";\n        } else if (typeof document.webkitHidden !== \"undefined\") {\n          TimeMe.hiddenPropName = \"webkitHidden\";\n          TimeMe.visibilityChangeEventName = \"webkitvisibilitychange\";\n        }\n        document.addEventListener(TimeMe.visibilityChangeEventName, () => {\n          if (document[TimeMe.hiddenPropName]) {\n            TimeMe.triggerUserHasLeftPageOrGoneIdle();\n          } else {\n            TimeMe.triggerUserHasReturned();\n          }\n        }, false);\n        window.addEventListener('blur', () => {\n          TimeMe.triggerUserHasLeftPageOrGoneIdle();\n        });\n        window.addEventListener('focus', () => {\n          TimeMe.triggerUserHasReturned();\n        });\n      },\n      listForIdleEvents: () => {\n        document.addEventListener(\"mousemove\", () => {\n          TimeMe.userActivityDetected();\n        });\n        document.addEventListener(\"keyup\", () => {\n          TimeMe.userActivityDetected();\n        });\n        document.addEventListener(\"touchstart\", () => {\n          TimeMe.userActivityDetected();\n        });\n        window.addEventListener(\"scroll\", () => {\n          TimeMe.userActivityDetected();\n        });\n        setInterval(() => {\n          if (TimeMe.isUserCurrentlyIdle !== true) {\n            TimeMe.checkIdleState();\n          }\n        }, TimeMe.checkIdleStateRateMs);\n      },\n      websocket: undefined,\n      websocketHost: undefined,\n      setUpWebsocket: websocketOptions => {\n        if (window.WebSocket && websocketOptions) {\n          let websocketHost = websocketOptions.websocketHost; // \"ws://hostname:port\"\n          try {\n            TimeMe.websocket = new WebSocket(websocketHost);\n            window.onbeforeunload = () => {\n              TimeMe.sendCurrentTime(websocketOptions.appId);\n            };\n            TimeMe.websocket.onopen = () => {\n              TimeMe.sendInitWsRequest(websocketOptions.appId);\n            };\n            TimeMe.websocket.onerror = error => {\n              if (console) {\n                console.log(\"Error occurred in websocket connection: \" + error);\n              }\n            };\n            TimeMe.websocket.onmessage = event => {\n              if (console) {\n                console.log(event.data);\n              }\n            };\n          } catch (error) {\n            if (console) {\n              console.error(\"Failed to connect to websocket host.  Error:\" + error);\n            }\n          }\n        }\n      },\n      websocketSend: data => {\n        TimeMe.websocket.send(JSON.stringify(data));\n      },\n      sendCurrentTime: appId => {\n        let timeSpentOnPage = TimeMe.getTimeOnCurrentPageInMilliseconds();\n        let data = {\n          type: \"INSERT_TIME\",\n          appId: appId,\n          timeOnPageMs: timeSpentOnPage,\n          pageName: TimeMe.currentPageName\n        };\n        TimeMe.websocketSend(data);\n      },\n      sendInitWsRequest: appId => {\n        let data = {\n          type: \"INIT\",\n          appId: appId\n        };\n        TimeMe.websocketSend(data);\n      },\n      initialize: options => {\n        let idleTimeoutInSeconds = TimeMe.idleTimeoutMs || 30;\n        let currentPageName = TimeMe.currentPageName || \"default-page-name\";\n        let websocketOptions = undefined;\n        let initialStartTime = undefined;\n        let trackWhenUserLeavesPage = true;\n        let trackWhenUserGoesIdle = true;\n        if (options) {\n          idleTimeoutInSeconds = options.idleTimeoutInSeconds || idleTimeoutInSeconds;\n          currentPageName = options.currentPageName || currentPageName;\n          websocketOptions = options.websocketOptions;\n          initialStartTime = options.initialStartTime;\n          if (options.trackWhenUserLeavesPage === false) {\n            trackWhenUserLeavesPage = false;\n          }\n          if (options.trackWhenUserGoesIdle === false) {\n            trackWhenUserGoesIdle = false;\n          }\n        }\n        TimeMe.setIdleDurationInSeconds(idleTimeoutInSeconds);\n        TimeMe.setCurrentPageName(currentPageName);\n        TimeMe.setUpWebsocket(websocketOptions);\n        TimeMe.listenForVisibilityEvents(trackWhenUserLeavesPage, trackWhenUserGoesIdle);\n\n        // TODO - only do this if page currently visible.\n\n        TimeMe.startTimer(undefined, initialStartTime);\n      }\n    };\n    return TimeMe;\n  });\n}).call(this);","map":{"version":3,"names":["root","factory","module","exports","define","amd","TimeMe","startStopTimes","idleTimeoutMs","currentIdleTimeMs","checkIdleStateRateMs","isUserCurrentlyOnPage","isUserCurrentlyIdle","currentPageName","timeElapsedCallbacks","userLeftCallbacks","userReturnCallbacks","trackTimeOnElement","elementId","element","document","getElementById","addEventListener","startTimer","stopTimer","getTimeOnElementInSeconds","time","getTimeOnPageInSeconds","pageName","startTime","undefined","arrayOfTimes","latestStartStopEntry","length","stopTime","push","Date","stopAllTimers","pageNames","Object","keys","i","getTimeOnCurrentPageInSeconds","timeInMs","getTimeOnPageInMilliseconds","getTimeOnCurrentPageInMilliseconds","totalTimeOnPage","timeSpentOnPageInSeconds","difference","Number","getTimeOnAllPagesInSeconds","allTimes","timeOnPage","setIdleDurationInSeconds","duration","durationFloat","parseFloat","isNaN","name","message","setCurrentPageName","resetRecordedPageTime","resetAllRecordedPageTimes","userActivityDetected","triggerUserHasReturned","resetIdleCountdown","callWhenUserLeaves","callback","numberOfTimesToInvoke","callWhenUserReturns","userReturnedCallback","numberTimes","triggerUserHasLeftPageOrGoneIdle","userHasLeftCallback","callAfterTimeElapsedInSeconds","timeInSeconds","pending","checkIdleState","visibilityChangeEventName","hiddenPropName","listenForVisibilityEvents","trackWhenUserLeavesPage","trackWhenUserGoesIdle","listenForUserLeavesOrReturnsEvents","listForIdleEvents","hidden","mozHidden","msHidden","webkitHidden","window","setInterval","websocket","websocketHost","setUpWebsocket","websocketOptions","WebSocket","onbeforeunload","sendCurrentTime","appId","onopen","sendInitWsRequest","onerror","error","console","log","onmessage","event","data","websocketSend","send","JSON","stringify","timeSpentOnPage","type","timeOnPageMs","initialize","options","idleTimeoutInSeconds","initialStartTime","call"],"sources":["/home/group4/TWON_STA_Case_Study/client/node_modules/timeme.js/timeme.js"],"sourcesContent":["/*Copyright (c) 2020 Jason Zissman\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\n(() => {\r\n\t((root, factory) => {\r\n\t\tif (typeof module !== 'undefined' && module.exports) {\r\n\t\t\t// CommonJS\r\n\t\t\treturn module.exports = factory();\r\n\t\t} else if (typeof define === 'function' && define.amd) {\r\n\t\t\t// AMD\r\n\t\t\tdefine([], () => {\r\n\t\t\t\treturn (root.TimeMe = factory());\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Global Variables\r\n\t\t\treturn root.TimeMe = factory();\r\n\t\t}\r\n\t})(this, () => {\r\n\r\n\t\tlet TimeMe = {\r\n\r\n\t\t\tstartStopTimes: {},\r\n\t\t\tidleTimeoutMs: 30 * 1000,\r\n\t\t\tcurrentIdleTimeMs: 0,\r\n\t\t\tcheckIdleStateRateMs: 250,\r\n\t\t\tisUserCurrentlyOnPage: true, \r\n\t\t\tisUserCurrentlyIdle: false, \r\n\t\t\tcurrentPageName: \"default-page-name\",\r\n\t\t\ttimeElapsedCallbacks: [],\r\n\t\t\tuserLeftCallbacks: [],\r\n\t\t\tuserReturnCallbacks: [],\r\n\r\n\t\t\ttrackTimeOnElement: (elementId) => {\r\n\t\t\t\tlet element = document.getElementById(elementId);\r\n\t\t\t\tif (element) {\r\n\t\t\t\t\telement.addEventListener(\"mouseover\", () => {\r\n\t\t\t\t\t\tTimeMe.startTimer(elementId);\r\n\t\t\t\t\t});\r\n\t\t\t\t\telement.addEventListener(\"mousemove\", () => {\r\n\t\t\t\t\t\tTimeMe.startTimer(elementId);\r\n\t\t\t\t\t});\r\n\t\t\t\t\telement.addEventListener(\"mouseleave\", () => {\r\n\t\t\t\t\t\tTimeMe.stopTimer(elementId);\r\n\t\t\t\t\t});\r\n\t\t\t\t\telement.addEventListener(\"keypress\", () => {\r\n\t\t\t\t\t\tTimeMe.startTimer(elementId);\r\n\t\t\t\t\t});\r\n\t\t\t\t\telement.addEventListener(\"focus\", () => {\r\n\t\t\t\t\t\tTimeMe.startTimer(elementId);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tgetTimeOnElementInSeconds: (elementId) => {\r\n\t\t\t\tlet time = TimeMe.getTimeOnPageInSeconds(elementId);\r\n\t\t\t\tif (time) {\r\n\t\t\t\t\treturn time;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// startTime is optional. If provided, must be of type Date(). By providing\r\n\t\t\t// startTime, you are overriding the internal timing mechanism and manually\r\n\t\t\t// indicating the start time.\r\n\t\t\tstartTimer: (pageName, startTime) => {\r\n\t\t\t\tif (!pageName) {\r\n\t\t\t\t\tpageName = TimeMe.currentPageName;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (TimeMe.startStopTimes[pageName] === undefined) {\r\n\t\t\t\t\tTimeMe.startStopTimes[pageName] = [];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet arrayOfTimes = TimeMe.startStopTimes[pageName];\r\n\t\t\t\t\tlet latestStartStopEntry = arrayOfTimes[arrayOfTimes.length - 1];\r\n\t\t\t\t\tif (latestStartStopEntry !== undefined && latestStartStopEntry.stopTime === undefined) {\r\n\t\t\t\t\t\t// Can't start new timer until previous finishes.\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTimeMe.startStopTimes[pageName].push({\r\n\t\t\t\t\t\"startTime\": startTime || new Date(),\r\n\t\t\t\t\t\"stopTime\": undefined\r\n\t\t\t\t});\t\t\t\t\r\n\t\t\t},\r\n\r\n\t\t\tstopAllTimers: () => {\r\n\t\t\t\tlet pageNames = Object.keys(TimeMe.startStopTimes);\r\n\t\t\t\tfor (let i = 0; i < pageNames.length; i++) {\r\n\t\t\t\t\tTimeMe.stopTimer(pageNames[i]);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// stopTime is optional. If provided, must be of type Date(). By providing\r\n\t\t\t// stopTime, you are overriding the internal timing mechanism and manually\r\n\t\t\t// indicating the stop time.\r\n\t\t\tstopTimer: (pageName, stopTime) => {\r\n\t\t\t\tif (!pageName) {\r\n\t\t\t\t\tpageName = TimeMe.currentPageName;\r\n\t\t\t\t}\r\n\t\t\t\tlet arrayOfTimes = TimeMe.startStopTimes[pageName];\r\n\t\t\t\tif (arrayOfTimes === undefined || arrayOfTimes.length === 0) {\r\n\t\t\t\t\t// Can't stop timer before you've started it.\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (arrayOfTimes[arrayOfTimes.length - 1].stopTime === undefined) {\r\n\t\t\t\t\tarrayOfTimes[arrayOfTimes.length - 1].stopTime = stopTime || new Date();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tgetTimeOnCurrentPageInSeconds: () => {\r\n\t\t\t\treturn TimeMe.getTimeOnPageInSeconds(TimeMe.currentPageName);\r\n\t\t\t},\r\n\r\n\t\t\tgetTimeOnPageInSeconds: (pageName) => {\r\n\t\t\t\tlet timeInMs = TimeMe.getTimeOnPageInMilliseconds(pageName);\r\n\t\t\t\tif (timeInMs === undefined) {\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn timeInMs / 1000;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tgetTimeOnCurrentPageInMilliseconds: () => {\r\n\t\t\t\treturn TimeMe.getTimeOnPageInMilliseconds(TimeMe.currentPageName);\r\n\t\t\t},\r\n\r\n\t\t\tgetTimeOnPageInMilliseconds: (pageName) => {\r\n\r\n\t\t\t\tlet totalTimeOnPage = 0;\r\n\r\n\t\t\t\tlet arrayOfTimes = TimeMe.startStopTimes[pageName];\r\n\t\t\t\tif (arrayOfTimes === undefined) {\r\n\t\t\t\t\t// Can't get time on page before you've started the timer.\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet timeSpentOnPageInSeconds = 0;\r\n\t\t\t\tfor (let i = 0; i < arrayOfTimes.length; i++) {\r\n\t\t\t\t\tlet startTime = arrayOfTimes[i].startTime;\r\n\t\t\t\t\tlet stopTime = arrayOfTimes[i].stopTime;\r\n\t\t\t\t\tif (stopTime === undefined) {\r\n\t\t\t\t\t\tstopTime = new Date();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet difference = stopTime - startTime;\r\n\t\t\t\t\ttimeSpentOnPageInSeconds += (difference);\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttotalTimeOnPage = Number(timeSpentOnPageInSeconds);\r\n\t\t\t\treturn totalTimeOnPage;\r\n\t\t\t},\r\n\r\n\t\t\tgetTimeOnAllPagesInSeconds: () => {\r\n\t\t\t\tlet allTimes = [];\r\n\t\t\t\tlet pageNames = Object.keys(TimeMe.startStopTimes);\r\n\t\t\t\tfor (let i = 0; i < pageNames.length; i++) {\r\n\t\t\t\t\tlet pageName = pageNames[i];\r\n\t\t\t\t\tlet timeOnPage = TimeMe.getTimeOnPageInSeconds(pageName);\r\n\t\t\t\t\tallTimes.push({\r\n\t\t\t\t\t\t\"pageName\": pageName,\r\n\t\t\t\t\t\t\"timeOnPage\": timeOnPage\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn allTimes;\r\n\t\t\t},\r\n\r\n\t\t\tsetIdleDurationInSeconds: (duration) => {\r\n\t\t\t\tlet durationFloat = parseFloat(duration);\r\n\t\t\t\tif (isNaN(durationFloat) === false) {\r\n\t\t\t\t\tTimeMe.idleTimeoutMs = duration * 1000;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow {\r\n\t\t\t\t\t\tname: \"InvalidDurationException\",\r\n\t\t\t\t\t\tmessage: \"An invalid duration time (\" + duration + \") was provided.\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tsetCurrentPageName: (pageName) => {\r\n\t\t\t\tTimeMe.currentPageName = pageName;\r\n\t\t\t},\r\n\r\n\t\t\tresetRecordedPageTime: (pageName) => {\r\n\t\t\t\tdelete TimeMe.startStopTimes[pageName];\r\n\t\t\t},\r\n\r\n\t\t\tresetAllRecordedPageTimes: () => {\r\n\t\t\t\tlet pageNames = Object.keys(TimeMe.startStopTimes);\r\n\t\t\t\tfor (let i = 0; i < pageNames.length; i++) {\r\n\t\t\t\t\tTimeMe.resetRecordedPageTime(pageNames[i]);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tuserActivityDetected: () => {\r\n\t\t\t\tif (TimeMe.isUserCurrentlyIdle) {\r\n\t\t\t\t\tTimeMe.triggerUserHasReturned();\r\n\t\t\t\t}\r\n\t\t\t\tTimeMe.resetIdleCountdown();\r\n\t\t\t},\r\n\t\t\tresetIdleCountdown: () => {\r\n\t\t\t\tTimeMe.isUserCurrentlyIdle = false;\r\n\t\t\t\tTimeMe.currentIdleTimeMs = 0;\r\n\t\t\t},\r\n\r\n\t\t\tcallWhenUserLeaves: (callback, numberOfTimesToInvoke) => {\r\n\t\t\t\tTimeMe.userLeftCallbacks.push({\r\n\t\t\t\t\tcallback: callback,\r\n\t\t\t\t\tnumberOfTimesToInvoke: numberOfTimesToInvoke\r\n\t\t\t\t})\r\n\t\t\t},\r\n\r\n\t\t\tcallWhenUserReturns: (callback, numberOfTimesToInvoke) => {\r\n\t\t\t\tTimeMe.userReturnCallbacks.push({\r\n\t\t\t\t\tcallback: callback,\r\n\t\t\t\t\tnumberOfTimesToInvoke: numberOfTimesToInvoke\r\n\t\t\t\t})\r\n\t\t\t},\r\n\r\n\t\t\ttriggerUserHasReturned: () => {\r\n\t\t\t\tif (!TimeMe.isUserCurrentlyOnPage) {\r\n\t\t\t\t\tTimeMe.isUserCurrentlyOnPage = true;\r\n\t\t\t\t\tTimeMe.resetIdleCountdown();\r\n\t\t\t\t\tfor (let i = 0; i < TimeMe.userReturnCallbacks.length; i++) {\r\n\t\t\t\t\t\tlet userReturnedCallback = TimeMe.userReturnCallbacks[i];\r\n\t\t\t\t\t\tlet numberTimes = userReturnedCallback.numberOfTimesToInvoke;\r\n\t\t\t\t\t\tif (isNaN(numberTimes) || (numberTimes === undefined) || numberTimes > 0) {\r\n\t\t\t\t\t\t\tuserReturnedCallback.numberOfTimesToInvoke -= 1;\r\n\t\t\t\t\t\t\tuserReturnedCallback.callback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTimeMe.startTimer();\r\n\t\t\t},\r\n\t\t\t// TODO - we are muddying the waters in between\r\n\t\t\t// 'user left page' and 'user gone idle'. Really should be\r\n\t\t\t// two separate concepts entirely. Need to break this into smaller  functions\r\n\t\t\t// for either scenario.\r\n\t\t\ttriggerUserHasLeftPageOrGoneIdle: () => {\r\n\t\t\t\tif (TimeMe.isUserCurrentlyOnPage) {\r\n\t\t\t\t\tTimeMe.isUserCurrentlyOnPage = false;\t\t\t\t\t\r\n\t\t\t\t\tfor (let i = 0; i < TimeMe.userLeftCallbacks.length; i++) {\r\n\t\t\t\t\t\tlet userHasLeftCallback = TimeMe.userLeftCallbacks[i];\r\n\t\t\t\t\t\tlet numberTimes = userHasLeftCallback.numberOfTimesToInvoke;\r\n\t\t\t\t\t\tif (isNaN(numberTimes) || (numberTimes === undefined) || numberTimes > 0) {\r\n\t\t\t\t\t\t\tuserHasLeftCallback.numberOfTimesToInvoke -= 1;\r\n\t\t\t\t\t\t\tuserHasLeftCallback.callback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTimeMe.stopAllTimers();\r\n\t\t\t},\r\n\r\n\t\t\tcallAfterTimeElapsedInSeconds: (timeInSeconds, callback) => {\r\n\t\t\t\tTimeMe.timeElapsedCallbacks.push({\r\n\t\t\t\t\ttimeInSeconds: timeInSeconds,\r\n\t\t\t\t\tcallback: callback,\r\n\t\t\t\t\tpending: true\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\tcheckIdleState: () => {\r\n\t\t\t\tfor (let i = 0; i < TimeMe.timeElapsedCallbacks.length; i++) {\r\n\t\t\t\t\tif (TimeMe.timeElapsedCallbacks[i].pending && TimeMe.getTimeOnCurrentPageInSeconds() > TimeMe.timeElapsedCallbacks[i].timeInSeconds) {\r\n\t\t\t\t\t\tTimeMe.timeElapsedCallbacks[i].callback();\r\n\t\t\t\t\t\tTimeMe.timeElapsedCallbacks[i].pending = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (TimeMe.isUserCurrentlyIdle === false && TimeMe.currentIdleTimeMs > TimeMe.idleTimeoutMs) {\r\n\t\t\t\t\tTimeMe.isUserCurrentlyIdle = true;\r\n\t\t\t\t\tTimeMe.triggerUserHasLeftPageOrGoneIdle();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tTimeMe.currentIdleTimeMs += TimeMe.checkIdleStateRateMs;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tvisibilityChangeEventName: undefined,\r\n\t\t\thiddenPropName: undefined,\r\n\r\n\t\t\tlistenForVisibilityEvents: (trackWhenUserLeavesPage, trackWhenUserGoesIdle) => {\r\n\r\n\t\t\t\tif (trackWhenUserLeavesPage) {\r\n\t\t\t\t\tTimeMe.listenForUserLeavesOrReturnsEvents();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (trackWhenUserGoesIdle) {\r\n\t\t\t\t\tTimeMe.listForIdleEvents();\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tlistenForUserLeavesOrReturnsEvents: () => {\r\n\t\t\t\tif (typeof document.hidden !== \"undefined\") {\r\n\t\t\t\t\tTimeMe.hiddenPropName = \"hidden\";\r\n\t\t\t\t\tTimeMe.visibilityChangeEventName = \"visibilitychange\";\r\n\t\t\t\t} else if (typeof document.mozHidden !== \"undefined\") {\r\n\t\t\t\t\tTimeMe.hiddenPropName = \"mozHidden\";\r\n\t\t\t\t\tTimeMe.visibilityChangeEventName = \"mozvisibilitychange\";\r\n\t\t\t\t} else if (typeof document.msHidden !== \"undefined\") {\r\n\t\t\t\t\tTimeMe.hiddenPropName = \"msHidden\";\r\n\t\t\t\t\tTimeMe.visibilityChangeEventName = \"msvisibilitychange\";\r\n\t\t\t\t} else if (typeof document.webkitHidden !== \"undefined\") {\r\n\t\t\t\t\tTimeMe.hiddenPropName = \"webkitHidden\";\r\n\t\t\t\t\tTimeMe.visibilityChangeEventName = \"webkitvisibilitychange\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdocument.addEventListener(TimeMe.visibilityChangeEventName, () => {\r\n\t\t\t\t\tif (document[TimeMe.hiddenPropName]) {\r\n\t\t\t\t\t\tTimeMe.triggerUserHasLeftPageOrGoneIdle();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tTimeMe.triggerUserHasReturned();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, false);\r\n\r\n\t\t\t\twindow.addEventListener('blur', () => {\r\n\t\t\t\t\tTimeMe.triggerUserHasLeftPageOrGoneIdle();\r\n\t\t\t\t});\r\n\r\n\t\t\t\twindow.addEventListener('focus', () => {\r\n\t\t\t\t\tTimeMe.triggerUserHasReturned();\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\tlistForIdleEvents: () => {\r\n\t\t\t\tdocument.addEventListener(\"mousemove\", () => { TimeMe.userActivityDetected(); });\r\n\t\t\t\tdocument.addEventListener(\"keyup\", () => { TimeMe.userActivityDetected(); });\r\n\t\t\t\tdocument.addEventListener(\"touchstart\", () => { TimeMe.userActivityDetected(); });\r\n\t\t\t\twindow.addEventListener(\"scroll\", () => { TimeMe.userActivityDetected(); });\r\n\r\n\t\t\t\tsetInterval(() => {\r\n\t\t\t\t\tif (TimeMe.isUserCurrentlyIdle !== true) {\r\n\t\t\t\t\t\tTimeMe.checkIdleState();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, TimeMe.checkIdleStateRateMs);\r\n\t\t\t},\r\n\r\n\t\t\twebsocket: undefined,\r\n\r\n\t\t\twebsocketHost: undefined,\r\n\r\n\t\t\tsetUpWebsocket: (websocketOptions) => {\r\n\t\t\t\tif (window.WebSocket && websocketOptions) {\r\n\t\t\t\t\tlet websocketHost = websocketOptions.websocketHost; // \"ws://hostname:port\"\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tTimeMe.websocket = new WebSocket(websocketHost);\r\n\t\t\t\t\t\twindow.onbeforeunload = () => {\r\n\t\t\t\t\t\t\tTimeMe.sendCurrentTime(websocketOptions.appId);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tTimeMe.websocket.onopen = () => {\r\n\t\t\t\t\t\t\tTimeMe.sendInitWsRequest(websocketOptions.appId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tTimeMe.websocket.onerror = (error) => {\r\n\t\t\t\t\t\t\tif (console) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Error occurred in websocket connection: \" + error);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tTimeMe.websocket.onmessage = (event) => {\r\n\t\t\t\t\t\t\tif (console) {\r\n\t\t\t\t\t\t\t\tconsole.log(event.data);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tif (console) {\r\n\t\t\t\t\t\t\tconsole.error(\"Failed to connect to websocket host.  Error:\" + error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\twebsocketSend: (data) => {\r\n\t\t\t\tTimeMe.websocket.send(JSON.stringify(data));\r\n\t\t\t},\r\n\r\n\t\t\tsendCurrentTime: (appId) => {\r\n\t\t\t\tlet timeSpentOnPage = TimeMe.getTimeOnCurrentPageInMilliseconds();\r\n\t\t\t\tlet data = {\r\n\t\t\t\t\ttype: \"INSERT_TIME\",\r\n\t\t\t\t\tappId: appId,\r\n\t\t\t\t\ttimeOnPageMs: timeSpentOnPage,\r\n\t\t\t\t\tpageName: TimeMe.currentPageName\r\n\t\t\t\t};\r\n\t\t\t\tTimeMe.websocketSend(data);\r\n\t\t\t},\r\n\t\t\tsendInitWsRequest: (appId) => {\r\n\t\t\t\tlet data = {\r\n\t\t\t\t\ttype: \"INIT\",\r\n\t\t\t\t\tappId: appId\r\n\t\t\t\t};\r\n\t\t\t\tTimeMe.websocketSend(data);\r\n\t\t\t},\r\n\r\n\t\t\tinitialize: (options) => {\r\n\r\n\t\t\t\tlet idleTimeoutInSeconds = TimeMe.idleTimeoutMs || 30;\r\n\t\t\t\tlet currentPageName = TimeMe.currentPageName || \"default-page-name\";\r\n\t\t\t\tlet websocketOptions = undefined;\r\n\t\t\t\tlet initialStartTime = undefined;\r\n\t\t\t\tlet trackWhenUserLeavesPage = true;\r\n\t\t\t\tlet trackWhenUserGoesIdle = true;\r\n\r\n\t\t\t\tif (options) {\r\n\t\t\t\t\tidleTimeoutInSeconds = options.idleTimeoutInSeconds || idleTimeoutInSeconds;\r\n\t\t\t\t\tcurrentPageName = options.currentPageName || currentPageName;\r\n\t\t\t\t\twebsocketOptions = options.websocketOptions;\r\n\t\t\t\t\tinitialStartTime = options.initialStartTime;\r\n\r\n\t\t\t\t\tif (options.trackWhenUserLeavesPage === false) {\r\n\t\t\t\t\t\ttrackWhenUserLeavesPage = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (options.trackWhenUserGoesIdle === false) {\r\n\t\t\t\t\t\ttrackWhenUserGoesIdle = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tTimeMe.setIdleDurationInSeconds(idleTimeoutInSeconds)\r\n\t\t\t\tTimeMe.setCurrentPageName(currentPageName)\r\n\t\t\t\tTimeMe.setUpWebsocket(websocketOptions)\r\n\t\t\t\tTimeMe.listenForVisibilityEvents(trackWhenUserLeavesPage, trackWhenUserGoesIdle);\r\n\r\n\t\t\t\t// TODO - only do this if page currently visible.\r\n\r\n\t\t\t\tTimeMe.startTimer(undefined, initialStartTime);\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn TimeMe;\r\n\t});\r\n}).call(this);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}